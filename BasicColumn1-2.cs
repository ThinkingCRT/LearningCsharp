namespace Basic.BasicColumn1_2
{
    class BasicCS
    {
        
        public static void Column1(string[] args) 
        {
            //--------------------------------------------------------------------------------------------------------------------------------------//
            
            // переменные - контейнер для значений 

            // две разные переменные, т.к. C# регистрозависимый
            int num = 2;
            int Num = 3;
            Console.WriteLine(num); // 2
            Console.WriteLine(Num); // 3
            // переменную можно переопределить
            num = 6;
            Console.WriteLine(num); // 6, т.к таким образом, мы переопределили переменную

            //--------------------------------------------------------------------------------------------------------------------------------------//
            
            // константы

            const float numConst = 6;
            Console.WriteLine(numConst);
            // numConst = 4; - ошибка, константы нельзя переинициализировать

            //--------------------------------------------------------------------------------------------------------------------------------------//

            // типы данных

            int numInt = 26;                    // стандартный тип целочисленных данных - занимает 4 байта
            byte numByte = 45;                  // бинарный тип целочисленных данных - занимает 2 байта
            int sumByteInt = numInt + numByte;  // можно складывать байты и int т.к. байты весят меньше
            Console.WriteLine(sumByteInt);      // вывод и конвертиртация byte => int
            string sCTI = "123";
            int numConvert = int.Parse(sCTI);   // преобразование из строки в число
            int? nullTyp = null;                // int? пишется в том случае, что возможно пустое значение в переменной
            Console.WriteLine(nullTyp);         // пустота
            dynamic dynamicType = 6;            // int, определение переменной на этапе компиляции (не надо), не безопасный тип
            var unkownType = "unwn";            // всегда требует инициализации, использование там, где тип данных очевиден
            //var unkownType;                   // так делать нельзя
            Console.WriteLine(unkownType);      // ДЛЯ ИЗБЕЖАНИЯ ОШИБКИ ПРИ КОМПИЛЯЦИИ
            object objValue = "srt";            // object - родитель базовых классов, снижает производительность, исп. там, где тип неизвестен

            //--------------------------------------------------------------------------------------------------------------------------------------//

            // интерполяция

            int interpol1 = 69;
            int interpol2 = 53;
            Console.WriteLine($"Значение 1: {interpol1}, значение 2: {interpol2}");     // юзабельный способ интерполяции
            Console.WriteLine($"Результат интерполяции {interpol1 + interpol2}");       // выражение в интерполяции
            Console.WriteLine("Ещё можно так её оформить: " + interpol1);               // ещё один способ исполнения

            //--------------------------------------------------------------------------------------------------------------------------------------//
        }

        public static void Column2() 
        {
            //--------------------------------------------------------------------------------------------------------------------------------------//

            // Операнды - теория в диаграмме

            int numb11 = 64;
            int numb12 = 34;
            int plus = numb11 + numb12;                                  // бинарная арифметическая операция
            int ternar = numb11 > numb12 ? numb11 * numb12 : numb12 = 4; // тернарная операция
            numb11 += numb12;                                            // операция присвоения к numb11 - 98
            

            //--------------------------------------------------------------------------------------------------------------------------------------//
        }
    }
}